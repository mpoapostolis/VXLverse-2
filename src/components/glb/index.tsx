/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 -t ghost.glb
*/

import { GLBType } from "@/lib/store"
import { useAnimations, useGLTF } from "@react-three/drei"
import { RigidBody } from "@react-three/rapier"
import { useEffect, useMemo, useRef } from "react"
import * as THREE from "three"
import { SkeletonUtils } from "three/examples/jsm/Addons.js"

function useGltfMemo(url: string) {
  const gltf = useGLTF(url)
  const scene = useMemo(() => SkeletonUtils.clone(gltf.scene), [gltf.scene])
  return { ...gltf, animations: [...gltf.animations], scene: scene }
}

export function Glb(
  props: JSX.IntrinsicElements["group"] &
    GLBType & {
      isEdit?: boolean
    },
) {
  const group = useRef<THREE.Group>()
  const { scene, animations } = useGltfMemo(`/glb/${props.name}.glb`)
  const { actions } = useAnimations(animations, group)
  useEffect(() => {
    const [_, first] = Object.keys(actions)
    actions[first]?.play()
  }, [actions])
  const commonProps = props.isEdit ? {} : props

  return (
    <RigidBody type="fixed" colliders="trimesh">
      <group ref={group} {...commonProps} dispose={null}>
        <primitive object={scene} dispose={null} />
      </group>
    </RigidBody>
  )
}
export const allGlbTypes = ["hoodie_guy", "farmer", "woman_1", "woman_2", "coin"] as const
allGlbTypes.forEach((type) => {
  useGLTF.preload(`/glb/${type}.glb`)
})
