/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGame as useGameConf } from "@/hooks/useGame"
import { GLBType } from "@/lib/game-store"
import { OrbitControls, useGLTF } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"
import { RapierRigidBody, RigidBody, vec3 } from "@react-three/rapier"
import { useMemo, useRef } from "react"
import { Vector3 } from "three"
import { SkeletonUtils } from "three/examples/jsm/Addons.js"

function useGltfMemo(url: string) {
  const gltf = useGLTF(url)
  const scene = useMemo(() => SkeletonUtils.clone(gltf.scene), [gltf.scene])
  return { ...gltf, animations: [...gltf.animations], scene: scene }
}
const animationSet: Record<string, string> = {
  idle: "",
  walk: "",
  run: "",
  jump: "",
  jumpIdle: "",
  jumpLand: "",
  fall: "", // This is for falling from high sky
  action1: "",
  action2: "",
  action3: "",
}

export function Glb(props: JSX.IntrinsicElements["group"] & GLBType) {
  const { scene } = useGltfMemo(props.url)
  const idle = props.animationSet?.idle
  const animations = Object.keys(animationSet).reduce((acc, key) => {
    return { ...acc, [key]: props.animationSet[key] ?? idle }
  }, {})
  const rigidBodyRef = useRef<RapierRigidBody>(null)
  const rb = rigidBodyRef?.current
  useFrame((t) => {
    if (!rb) return
    const { x, y, z } = vec3(rb.translation())
    const newPos = new Vector3(x, y + 2, z)
    // @ts-ignore
    t?.controls?.target?.copy(newPos)
  })

  return (
    <group>
      <OrbitControls makeDefault />
      <RigidBody
        colliders="hull"
        scale={props.scale}
        lockRotations
        friction={0}
        ref={rigidBodyRef}
        position={props.position}
      >
        <primitive object={scene} />
      </RigidBody>
    </group>
  )
}

/**
 * Keyboard control preset
 */
export const keyboardMap = [
  { name: "forward", keys: ["ArrowUp", "KeyW"] },
  { name: "backward", keys: ["ArrowDown", "KeyS"] },
  { name: "leftward", keys: ["ArrowLeft", "KeyA"] },
  { name: "rightward", keys: ["ArrowRight", "KeyD"] },
  { name: "jump", keys: ["Space"] },
  { name: "run", keys: ["Shift"] },
  { name: "action1", keys: ["1"] },
  { name: "action2", keys: ["2"] },
  { name: "action3", keys: ["3"] },
  { name: "action4", keys: ["KeyF"] },
]

export function Hero() {
  const { data } = useGameConf()
  const hero = data?.gameConf?.glbs?.find((c) => c?.type === "hero")
  return <Glb {...hero} />
}
